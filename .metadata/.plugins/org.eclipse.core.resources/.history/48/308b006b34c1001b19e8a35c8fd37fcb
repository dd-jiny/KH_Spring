package com.test04;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Before;

public class MyAspect {
	
	@Before("execution(public * *(..))")
	public void before(JoinPoint join) {
		System.out.println("출석한다. ");
	}
	
	@After("excution(public * *(..)")
	public void after(JoinPoint join) {
		System.out.println("집에 간다.");
	}
	
	//returnValue는 해당 메소드의 리턴 객체를 그대로 가져올 수 있다. 
	@AfterReturning(pointcut = "execution(public * *(..))", returning = "returnVal")
	public void returning(JoinPoint join, Object returnVal) {
		System.out.println(returnVal+"열심히 하는 날이었다.....아마두");
	}
	
	@AfterThrowing("execution(public * *(..))")
	public void throwing() {
		System.out.println("쉬는날이었따....");
		//exception 으로 해당 메서드에서 발생한 예외를 가져올 수 있다.
	}

}
